-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mult_accel_core is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_data_V_empty_n : IN STD_LOGIC;
    in_stream_data_V_read : OUT STD_LOGIC;
    in_stream_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_keep_V_empty_n : IN STD_LOGIC;
    in_stream_keep_V_read : OUT STD_LOGIC;
    in_stream_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_strb_V_empty_n : IN STD_LOGIC;
    in_stream_strb_V_read : OUT STD_LOGIC;
    in_stream_user_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_user_V_empty_n : IN STD_LOGIC;
    in_stream_user_V_read : OUT STD_LOGIC;
    in_stream_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_last_V_empty_n : IN STD_LOGIC;
    in_stream_last_V_read : OUT STD_LOGIC;
    in_stream_id_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_id_V_empty_n : IN STD_LOGIC;
    in_stream_id_V_read : OUT STD_LOGIC;
    in_stream_dest_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_dest_V_empty_n : IN STD_LOGIC;
    in_stream_dest_V_read : OUT STD_LOGIC;
    out_stream_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_data_V_full_n : IN STD_LOGIC;
    out_stream_data_V_write : OUT STD_LOGIC;
    out_stream_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_keep_V_full_n : IN STD_LOGIC;
    out_stream_keep_V_write : OUT STD_LOGIC;
    out_stream_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_strb_V_full_n : IN STD_LOGIC;
    out_stream_strb_V_write : OUT STD_LOGIC;
    out_stream_user_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_user_V_full_n : IN STD_LOGIC;
    out_stream_user_V_write : OUT STD_LOGIC;
    out_stream_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_last_V_full_n : IN STD_LOGIC;
    out_stream_last_V_write : OUT STD_LOGIC;
    out_stream_id_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_id_V_full_n : IN STD_LOGIC;
    out_stream_id_V_write : OUT STD_LOGIC;
    out_stream_dest_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_dest_V_full_n : IN STD_LOGIC;
    out_stream_dest_V_write : OUT STD_LOGIC );
end;


architecture behav of mult_accel_core is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_pop_stream_fu_199_e_data_V_blk_n : STD_LOGIC;
    signal in_stream_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_pop_stream_fu_199_e_keep_V_blk_n : STD_LOGIC;
    signal in_stream_keep_V_blk_n : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_strb_V_blk_n : STD_LOGIC;
    signal in_stream_strb_V_blk_n : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_user_V_blk_n : STD_LOGIC;
    signal in_stream_user_V_blk_n : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_last_V_blk_n : STD_LOGIC;
    signal in_stream_last_V_blk_n : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_id_V_blk_n : STD_LOGIC;
    signal in_stream_id_V_blk_n : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_dest_V_blk_n : STD_LOGIC;
    signal in_stream_dest_V_blk_n : STD_LOGIC;
    signal out_stream_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal out_stream_keep_V_blk_n : STD_LOGIC;
    signal out_stream_strb_V_blk_n : STD_LOGIC;
    signal out_stream_user_V_blk_n : STD_LOGIC;
    signal out_stream_last_V_blk_n : STD_LOGIC;
    signal out_stream_id_V_blk_n : STD_LOGIC;
    signal out_stream_dest_V_blk_n : STD_LOGIC;
    signal i_2_fu_232_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_263 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_3_fu_249_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_271 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_we0 : STD_LOGIC;
    signal b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_vector_multiply_hw_fu_193_ap_start : STD_LOGIC;
    signal grp_vector_multiply_hw_fu_193_ap_done : STD_LOGIC;
    signal grp_vector_multiply_hw_fu_193_ap_idle : STD_LOGIC;
    signal grp_vector_multiply_hw_fu_193_ap_ready : STD_LOGIC;
    signal grp_vector_multiply_hw_fu_193_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_multiply_hw_fu_193_a_ce0 : STD_LOGIC;
    signal grp_vector_multiply_hw_fu_193_b_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_multiply_hw_fu_193_b_ce0 : STD_LOGIC;
    signal grp_vector_multiply_hw_fu_193_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pop_stream_fu_199_ap_start : STD_LOGIC;
    signal grp_pop_stream_fu_199_ap_done : STD_LOGIC;
    signal grp_pop_stream_fu_199_ap_idle : STD_LOGIC;
    signal grp_pop_stream_fu_199_ap_ready : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_data_V_read : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_keep_V_read : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_strb_V_read : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_user_V_read : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_last_V_read : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_id_V_read : STD_LOGIC;
    signal grp_pop_stream_fu_199_e_dest_V_read : STD_LOGIC;
    signal grp_pop_stream_fu_199_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_push_stream_fu_219_ap_ready : STD_LOGIC;
    signal call_ret_push_stream_fu_219_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_169 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal i1_reg_181 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal exitcond1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_vector_multiply_hw_fu_193_ap_start_reg : STD_LOGIC := '0';
    signal exitcond_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component vector_multiply_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pop_stream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        e_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        e_data_V_empty_n : IN STD_LOGIC;
        e_data_V_read : OUT STD_LOGIC;
        e_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        e_keep_V_empty_n : IN STD_LOGIC;
        e_keep_V_read : OUT STD_LOGIC;
        e_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        e_strb_V_empty_n : IN STD_LOGIC;
        e_strb_V_read : OUT STD_LOGIC;
        e_user_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        e_user_V_empty_n : IN STD_LOGIC;
        e_user_V_read : OUT STD_LOGIC;
        e_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        e_last_V_empty_n : IN STD_LOGIC;
        e_last_V_read : OUT STD_LOGIC;
        e_id_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        e_id_V_empty_n : IN STD_LOGIC;
        e_id_V_read : OUT STD_LOGIC;
        e_dest_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        e_dest_V_empty_n : IN STD_LOGIC;
        e_dest_V_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        e_data_V_blk_n : OUT STD_LOGIC;
        e_keep_V_blk_n : OUT STD_LOGIC;
        e_strb_V_blk_n : OUT STD_LOGIC;
        e_user_V_blk_n : OUT STD_LOGIC;
        e_last_V_blk_n : OUT STD_LOGIC;
        e_id_V_blk_n : OUT STD_LOGIC;
        e_dest_V_blk_n : OUT STD_LOGIC );
    end component;


    component push_stream IS
    port (
        ap_ready : OUT STD_LOGIC;
        v_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mult_accel_core_a IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    a_U : component mult_accel_core_a
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => grp_pop_stream_fu_199_ap_return,
        q0 => a_q0);

    b_U : component mult_accel_core_a
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_address0,
        ce0 => b_ce0,
        we0 => b_we0,
        d0 => grp_pop_stream_fu_199_ap_return,
        q0 => b_q0);

    grp_vector_multiply_hw_fu_193 : component vector_multiply_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_multiply_hw_fu_193_ap_start,
        ap_done => grp_vector_multiply_hw_fu_193_ap_done,
        ap_idle => grp_vector_multiply_hw_fu_193_ap_idle,
        ap_ready => grp_vector_multiply_hw_fu_193_ap_ready,
        a_address0 => grp_vector_multiply_hw_fu_193_a_address0,
        a_ce0 => grp_vector_multiply_hw_fu_193_a_ce0,
        a_q0 => a_q0,
        b_address0 => grp_vector_multiply_hw_fu_193_b_address0,
        b_ce0 => grp_vector_multiply_hw_fu_193_b_ce0,
        b_q0 => b_q0,
        ap_return => grp_vector_multiply_hw_fu_193_ap_return);

    grp_pop_stream_fu_199 : component pop_stream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pop_stream_fu_199_ap_start,
        ap_done => grp_pop_stream_fu_199_ap_done,
        ap_idle => grp_pop_stream_fu_199_ap_idle,
        ap_ready => grp_pop_stream_fu_199_ap_ready,
        e_data_V_dout => in_stream_data_V_dout,
        e_data_V_empty_n => in_stream_data_V_empty_n,
        e_data_V_read => grp_pop_stream_fu_199_e_data_V_read,
        e_keep_V_dout => in_stream_keep_V_dout,
        e_keep_V_empty_n => in_stream_keep_V_empty_n,
        e_keep_V_read => grp_pop_stream_fu_199_e_keep_V_read,
        e_strb_V_dout => in_stream_strb_V_dout,
        e_strb_V_empty_n => in_stream_strb_V_empty_n,
        e_strb_V_read => grp_pop_stream_fu_199_e_strb_V_read,
        e_user_V_dout => in_stream_user_V_dout,
        e_user_V_empty_n => in_stream_user_V_empty_n,
        e_user_V_read => grp_pop_stream_fu_199_e_user_V_read,
        e_last_V_dout => in_stream_last_V_dout,
        e_last_V_empty_n => in_stream_last_V_empty_n,
        e_last_V_read => grp_pop_stream_fu_199_e_last_V_read,
        e_id_V_dout => in_stream_id_V_dout,
        e_id_V_empty_n => in_stream_id_V_empty_n,
        e_id_V_read => grp_pop_stream_fu_199_e_id_V_read,
        e_dest_V_dout => in_stream_dest_V_dout,
        e_dest_V_empty_n => in_stream_dest_V_empty_n,
        e_dest_V_read => grp_pop_stream_fu_199_e_dest_V_read,
        ap_return => grp_pop_stream_fu_199_ap_return,
        e_data_V_blk_n => grp_pop_stream_fu_199_e_data_V_blk_n,
        e_keep_V_blk_n => grp_pop_stream_fu_199_e_keep_V_blk_n,
        e_strb_V_blk_n => grp_pop_stream_fu_199_e_strb_V_blk_n,
        e_user_V_blk_n => grp_pop_stream_fu_199_e_user_V_blk_n,
        e_last_V_blk_n => grp_pop_stream_fu_199_e_last_V_blk_n,
        e_id_V_blk_n => grp_pop_stream_fu_199_e_id_V_blk_n,
        e_dest_V_blk_n => grp_pop_stream_fu_199_e_dest_V_blk_n);

    call_ret_push_stream_fu_219 : component push_stream
    port map (
        ap_ready => call_ret_push_stream_fu_219_ap_ready,
        v_read => grp_vector_multiply_hw_fu_193_ap_return,
        ap_return => call_ret_push_stream_fu_219_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_vector_multiply_hw_fu_193_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_multiply_hw_fu_193_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_vector_multiply_hw_fu_193_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_multiply_hw_fu_193_ap_ready = ap_const_logic_1)) then 
                    grp_vector_multiply_hw_fu_193_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_181 <= ap_const_lv10_0;
            elsif ((not(((grp_pop_stream_fu_199_e_user_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_strb_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_keep_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_data_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_dest_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_id_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_last_V_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i1_reg_181 <= i_3_reg_271;
            end if; 
        end if;
    end process;

    i_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((grp_pop_stream_fu_199_e_user_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_strb_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_keep_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_data_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_dest_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_id_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_last_V_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_169 <= i_2_reg_263;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_169 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_263 <= i_2_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_3_reg_271 <= i_3_fu_249_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n, grp_pop_stream_fu_199_e_data_V_blk_n, ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_keep_V_blk_n, grp_pop_stream_fu_199_e_strb_V_blk_n, grp_pop_stream_fu_199_e_user_V_blk_n, grp_pop_stream_fu_199_e_last_V_blk_n, grp_pop_stream_fu_199_e_id_V_blk_n, grp_pop_stream_fu_199_e_dest_V_blk_n, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_vector_multiply_hw_fu_193_ap_done, exitcond1_fu_226_p2, exitcond_fu_243_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((grp_pop_stream_fu_199_e_user_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_strb_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_keep_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_data_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_dest_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_id_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_last_V_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((grp_pop_stream_fu_199_e_user_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_strb_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_keep_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_data_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_dest_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_id_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_last_V_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0) or (grp_vector_multiply_hw_fu_193_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_a_address0, tmp_fu_238_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= tmp_fu_238_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address0 <= grp_vector_multiply_hw_fu_193_a_address0;
        else 
            a_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(grp_pop_stream_fu_199_e_data_V_blk_n, ap_CS_fsm_state3, grp_pop_stream_fu_199_e_keep_V_blk_n, grp_pop_stream_fu_199_e_strb_V_blk_n, grp_pop_stream_fu_199_e_user_V_blk_n, grp_pop_stream_fu_199_e_last_V_blk_n, grp_pop_stream_fu_199_e_id_V_blk_n, grp_pop_stream_fu_199_e_dest_V_blk_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_a_ce0)
    begin
        if ((not(((grp_pop_stream_fu_199_e_user_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_strb_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_keep_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_data_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_dest_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_id_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_last_V_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            a_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_ce0 <= grp_vector_multiply_hw_fu_193_a_ce0;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(grp_pop_stream_fu_199_e_data_V_blk_n, ap_CS_fsm_state3, grp_pop_stream_fu_199_e_keep_V_blk_n, grp_pop_stream_fu_199_e_strb_V_blk_n, grp_pop_stream_fu_199_e_user_V_blk_n, grp_pop_stream_fu_199_e_last_V_blk_n, grp_pop_stream_fu_199_e_id_V_blk_n, grp_pop_stream_fu_199_e_dest_V_blk_n)
    begin
        if ((not(((grp_pop_stream_fu_199_e_user_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_strb_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_keep_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_data_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_dest_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_id_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_last_V_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state3_assign_proc : process(grp_pop_stream_fu_199_e_data_V_blk_n, grp_pop_stream_fu_199_e_keep_V_blk_n, grp_pop_stream_fu_199_e_strb_V_blk_n, grp_pop_stream_fu_199_e_user_V_blk_n, grp_pop_stream_fu_199_e_last_V_blk_n, grp_pop_stream_fu_199_e_id_V_blk_n, grp_pop_stream_fu_199_e_dest_V_blk_n)
    begin
                ap_block_state3 <= ((grp_pop_stream_fu_199_e_user_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_strb_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_keep_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_data_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_dest_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_id_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_last_V_blk_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(grp_pop_stream_fu_199_e_data_V_blk_n, grp_pop_stream_fu_199_e_keep_V_blk_n, grp_pop_stream_fu_199_e_strb_V_blk_n, grp_pop_stream_fu_199_e_user_V_blk_n, grp_pop_stream_fu_199_e_last_V_blk_n, grp_pop_stream_fu_199_e_id_V_blk_n, grp_pop_stream_fu_199_e_dest_V_blk_n)
    begin
                ap_block_state5 <= ((grp_pop_stream_fu_199_e_user_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_strb_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_keep_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_data_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_dest_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_id_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_last_V_blk_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n)
    begin
                ap_block_state6 <= ((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_ap_done)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0) or (grp_vector_multiply_hw_fu_193_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_ap_done)
    begin
        if ((not(((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0) or (grp_vector_multiply_hw_fu_193_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_b_address0, tmp_8_fu_255_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address0 <= tmp_8_fu_255_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_address0 <= grp_vector_multiply_hw_fu_193_b_address0;
        else 
            b_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(grp_pop_stream_fu_199_e_data_V_blk_n, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_keep_V_blk_n, grp_pop_stream_fu_199_e_strb_V_blk_n, grp_pop_stream_fu_199_e_user_V_blk_n, grp_pop_stream_fu_199_e_last_V_blk_n, grp_pop_stream_fu_199_e_id_V_blk_n, grp_pop_stream_fu_199_e_dest_V_blk_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_b_ce0)
    begin
        if ((not(((grp_pop_stream_fu_199_e_user_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_strb_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_keep_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_data_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_dest_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_id_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_last_V_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            b_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_ce0 <= grp_vector_multiply_hw_fu_193_b_ce0;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_we0_assign_proc : process(grp_pop_stream_fu_199_e_data_V_blk_n, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_keep_V_blk_n, grp_pop_stream_fu_199_e_strb_V_blk_n, grp_pop_stream_fu_199_e_user_V_blk_n, grp_pop_stream_fu_199_e_last_V_blk_n, grp_pop_stream_fu_199_e_id_V_blk_n, grp_pop_stream_fu_199_e_dest_V_blk_n)
    begin
        if ((not(((grp_pop_stream_fu_199_e_user_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_strb_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_keep_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_data_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_dest_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_id_V_blk_n = ap_const_logic_0) or (grp_pop_stream_fu_199_e_last_V_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            b_we0 <= ap_const_logic_1;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_226_p2 <= "1" when (i_reg_169 = ap_const_lv10_310) else "0";
    exitcond_fu_243_p2 <= "1" when (i1_reg_181 = ap_const_lv10_310) else "0";

    grp_pop_stream_fu_199_ap_start_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_pop_stream_fu_199_ap_start <= ap_const_logic_1;
        else 
            grp_pop_stream_fu_199_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_vector_multiply_hw_fu_193_ap_start <= grp_vector_multiply_hw_fu_193_ap_start_reg;
    i_2_fu_232_p2 <= std_logic_vector(unsigned(i_reg_169) + unsigned(ap_const_lv10_1));
    i_3_fu_249_p2 <= std_logic_vector(unsigned(i1_reg_181) + unsigned(ap_const_lv10_1));

    in_stream_data_V_blk_n_assign_proc : process(grp_pop_stream_fu_199_e_data_V_blk_n, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_data_V_blk_n <= grp_pop_stream_fu_199_e_data_V_blk_n;
        else 
            in_stream_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_data_V_read_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_data_V_read)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_data_V_read <= grp_pop_stream_fu_199_e_data_V_read;
        else 
            in_stream_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_dest_V_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_dest_V_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_dest_V_blk_n <= grp_pop_stream_fu_199_e_dest_V_blk_n;
        else 
            in_stream_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_dest_V_read_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_dest_V_read)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_dest_V_read <= grp_pop_stream_fu_199_e_dest_V_read;
        else 
            in_stream_dest_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_id_V_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_id_V_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_id_V_blk_n <= grp_pop_stream_fu_199_e_id_V_blk_n;
        else 
            in_stream_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_id_V_read_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_id_V_read)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_id_V_read <= grp_pop_stream_fu_199_e_id_V_read;
        else 
            in_stream_id_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_keep_V_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_keep_V_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_keep_V_blk_n <= grp_pop_stream_fu_199_e_keep_V_blk_n;
        else 
            in_stream_keep_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_keep_V_read_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_keep_V_read)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_keep_V_read <= grp_pop_stream_fu_199_e_keep_V_read;
        else 
            in_stream_keep_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_last_V_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_last_V_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_last_V_blk_n <= grp_pop_stream_fu_199_e_last_V_blk_n;
        else 
            in_stream_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_last_V_read_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_last_V_read)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_last_V_read <= grp_pop_stream_fu_199_e_last_V_read;
        else 
            in_stream_last_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_strb_V_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_strb_V_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_strb_V_blk_n <= grp_pop_stream_fu_199_e_strb_V_blk_n;
        else 
            in_stream_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_strb_V_read_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_strb_V_read)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_strb_V_read <= grp_pop_stream_fu_199_e_strb_V_read;
        else 
            in_stream_strb_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_user_V_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_user_V_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_user_V_blk_n <= grp_pop_stream_fu_199_e_user_V_blk_n;
        else 
            in_stream_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_user_V_read_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_pop_stream_fu_199_e_user_V_read)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_stream_user_V_read <= grp_pop_stream_fu_199_e_user_V_read;
        else 
            in_stream_user_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_data_V_blk_n_assign_proc : process(out_stream_data_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_stream_data_V_blk_n <= out_stream_data_V_full_n;
        else 
            out_stream_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_data_V_din <= call_ret_push_stream_fu_219_ap_return;

    out_stream_data_V_write_assign_proc : process(out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_ap_done)
    begin
        if ((not(((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0) or (grp_vector_multiply_hw_fu_193_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_stream_data_V_write <= ap_const_logic_1;
        else 
            out_stream_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_dest_V_blk_n_assign_proc : process(out_stream_dest_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_stream_dest_V_blk_n <= out_stream_dest_V_full_n;
        else 
            out_stream_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_dest_V_din <= ap_const_lv5_0;

    out_stream_dest_V_write_assign_proc : process(out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_ap_done)
    begin
        if ((not(((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0) or (grp_vector_multiply_hw_fu_193_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_stream_dest_V_write <= ap_const_logic_1;
        else 
            out_stream_dest_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_id_V_blk_n_assign_proc : process(out_stream_id_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_stream_id_V_blk_n <= out_stream_id_V_full_n;
        else 
            out_stream_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_id_V_din <= ap_const_lv5_0;

    out_stream_id_V_write_assign_proc : process(out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_ap_done)
    begin
        if ((not(((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0) or (grp_vector_multiply_hw_fu_193_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_stream_id_V_write <= ap_const_logic_1;
        else 
            out_stream_id_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_keep_V_blk_n_assign_proc : process(out_stream_keep_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_stream_keep_V_blk_n <= out_stream_keep_V_full_n;
        else 
            out_stream_keep_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_keep_V_din <= ap_const_lv4_F;

    out_stream_keep_V_write_assign_proc : process(out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_ap_done)
    begin
        if ((not(((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0) or (grp_vector_multiply_hw_fu_193_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_stream_keep_V_write <= ap_const_logic_1;
        else 
            out_stream_keep_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_last_V_blk_n_assign_proc : process(out_stream_last_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_stream_last_V_blk_n <= out_stream_last_V_full_n;
        else 
            out_stream_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_last_V_din <= ap_const_lv1_1;

    out_stream_last_V_write_assign_proc : process(out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_ap_done)
    begin
        if ((not(((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0) or (grp_vector_multiply_hw_fu_193_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_stream_last_V_write <= ap_const_logic_1;
        else 
            out_stream_last_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_strb_V_blk_n_assign_proc : process(out_stream_strb_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_stream_strb_V_blk_n <= out_stream_strb_V_full_n;
        else 
            out_stream_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_strb_V_din <= ap_const_lv4_F;

    out_stream_strb_V_write_assign_proc : process(out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_ap_done)
    begin
        if ((not(((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0) or (grp_vector_multiply_hw_fu_193_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_stream_strb_V_write <= ap_const_logic_1;
        else 
            out_stream_strb_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_user_V_blk_n_assign_proc : process(out_stream_user_V_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_stream_user_V_blk_n <= out_stream_user_V_full_n;
        else 
            out_stream_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_user_V_din <= ap_const_lv4_0;

    out_stream_user_V_write_assign_proc : process(out_stream_data_V_full_n, out_stream_keep_V_full_n, out_stream_strb_V_full_n, out_stream_user_V_full_n, out_stream_last_V_full_n, out_stream_id_V_full_n, out_stream_dest_V_full_n, ap_CS_fsm_state6, grp_vector_multiply_hw_fu_193_ap_done)
    begin
        if ((not(((out_stream_dest_V_full_n = ap_const_logic_0) or (out_stream_id_V_full_n = ap_const_logic_0) or (out_stream_last_V_full_n = ap_const_logic_0) or (out_stream_user_V_full_n = ap_const_logic_0) or (out_stream_strb_V_full_n = ap_const_logic_0) or (out_stream_keep_V_full_n = ap_const_logic_0) or (out_stream_data_V_full_n = ap_const_logic_0) or (grp_vector_multiply_hw_fu_193_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_stream_user_V_write <= ap_const_logic_1;
        else 
            out_stream_user_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_8_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_181),64));
    tmp_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_169),64));
end behav;
