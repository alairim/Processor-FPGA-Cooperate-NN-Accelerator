-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pop_stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    e_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    e_data_V_empty_n : IN STD_LOGIC;
    e_data_V_read : OUT STD_LOGIC;
    e_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    e_keep_V_empty_n : IN STD_LOGIC;
    e_keep_V_read : OUT STD_LOGIC;
    e_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    e_strb_V_empty_n : IN STD_LOGIC;
    e_strb_V_read : OUT STD_LOGIC;
    e_user_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    e_user_V_empty_n : IN STD_LOGIC;
    e_user_V_read : OUT STD_LOGIC;
    e_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    e_last_V_empty_n : IN STD_LOGIC;
    e_last_V_read : OUT STD_LOGIC;
    e_id_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    e_id_V_empty_n : IN STD_LOGIC;
    e_id_V_read : OUT STD_LOGIC;
    e_dest_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    e_dest_V_empty_n : IN STD_LOGIC;
    e_dest_V_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    e_data_V_blk_n : OUT STD_LOGIC;
    e_keep_V_blk_n : OUT STD_LOGIC;
    e_strb_V_blk_n : OUT STD_LOGIC;
    e_user_V_blk_n : OUT STD_LOGIC;
    e_last_V_blk_n : OUT STD_LOGIC;
    e_id_V_blk_n : OUT STD_LOGIC;
    e_dest_V_blk_n : OUT STD_LOGIC );
end;


architecture behav of pop_stream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ret_fu_80_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_preg <= ret_fu_80_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n, ret_fu_80_p1, ap_return_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return <= ret_fu_80_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    e_data_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_data_V_blk_n <= e_data_V_empty_n;
        else 
            e_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_data_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_data_V_read <= ap_const_logic_1;
        else 
            e_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    e_dest_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, e_dest_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_dest_V_blk_n <= e_dest_V_empty_n;
        else 
            e_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_dest_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_dest_V_read <= ap_const_logic_1;
        else 
            e_dest_V_read <= ap_const_logic_0;
        end if; 
    end process;


    e_id_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, e_id_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_id_V_blk_n <= e_id_V_empty_n;
        else 
            e_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_id_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_id_V_read <= ap_const_logic_1;
        else 
            e_id_V_read <= ap_const_logic_0;
        end if; 
    end process;


    e_keep_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, e_keep_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_keep_V_blk_n <= e_keep_V_empty_n;
        else 
            e_keep_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_keep_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_keep_V_read <= ap_const_logic_1;
        else 
            e_keep_V_read <= ap_const_logic_0;
        end if; 
    end process;


    e_last_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, e_last_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_last_V_blk_n <= e_last_V_empty_n;
        else 
            e_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_last_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_last_V_read <= ap_const_logic_1;
        else 
            e_last_V_read <= ap_const_logic_0;
        end if; 
    end process;


    e_strb_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, e_strb_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_strb_V_blk_n <= e_strb_V_empty_n;
        else 
            e_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_strb_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_strb_V_read <= ap_const_logic_1;
        else 
            e_strb_V_read <= ap_const_logic_0;
        end if; 
    end process;


    e_user_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, e_user_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_user_V_blk_n <= e_user_V_empty_n;
        else 
            e_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_user_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, e_data_V_empty_n, e_keep_V_empty_n, e_strb_V_empty_n, e_user_V_empty_n, e_last_V_empty_n, e_id_V_empty_n, e_dest_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (e_dest_V_empty_n = ap_const_logic_0) or (e_id_V_empty_n = ap_const_logic_0) or (e_last_V_empty_n = ap_const_logic_0) or (e_user_V_empty_n = ap_const_logic_0) or (e_strb_V_empty_n = ap_const_logic_0) or (e_keep_V_empty_n = ap_const_logic_0) or (e_data_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_user_V_read <= ap_const_logic_1;
        else 
            e_user_V_read <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_80_p1 <= e_data_V_dout;
end behav;
