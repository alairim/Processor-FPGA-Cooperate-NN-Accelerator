-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mult_accel_core_call is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_data_V_empty_n : IN STD_LOGIC;
    in_stream_data_V_read : OUT STD_LOGIC;
    in_stream_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_keep_V_empty_n : IN STD_LOGIC;
    in_stream_keep_V_read : OUT STD_LOGIC;
    in_stream_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_strb_V_empty_n : IN STD_LOGIC;
    in_stream_strb_V_read : OUT STD_LOGIC;
    in_stream_user_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_user_V_empty_n : IN STD_LOGIC;
    in_stream_user_V_read : OUT STD_LOGIC;
    in_stream_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_last_V_empty_n : IN STD_LOGIC;
    in_stream_last_V_read : OUT STD_LOGIC;
    in_stream_id_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_id_V_empty_n : IN STD_LOGIC;
    in_stream_id_V_read : OUT STD_LOGIC;
    in_stream_dest_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_dest_V_empty_n : IN STD_LOGIC;
    in_stream_dest_V_read : OUT STD_LOGIC;
    out_stream_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_data_V_full_n : IN STD_LOGIC;
    out_stream_data_V_write : OUT STD_LOGIC;
    out_stream_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_keep_V_full_n : IN STD_LOGIC;
    out_stream_keep_V_write : OUT STD_LOGIC;
    out_stream_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_strb_V_full_n : IN STD_LOGIC;
    out_stream_strb_V_write : OUT STD_LOGIC;
    out_stream_user_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_user_V_full_n : IN STD_LOGIC;
    out_stream_user_V_write : OUT STD_LOGIC;
    out_stream_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_last_V_full_n : IN STD_LOGIC;
    out_stream_last_V_write : OUT STD_LOGIC;
    out_stream_id_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_id_V_full_n : IN STD_LOGIC;
    out_stream_id_V_write : OUT STD_LOGIC;
    out_stream_dest_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_dest_V_full_n : IN STD_LOGIC;
    out_stream_dest_V_write : OUT STD_LOGIC );
end;


architecture behav of mult_accel_core_call is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mult_accel_core_call,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007sclg225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=11765,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=5,HLS_SYN_FF=623,HLS_SYN_LUT=1399,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_mult_accel_core_fu_58_ap_start : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_ap_done : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_ap_idle : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_ap_ready : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_in_stream_data_V_read : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_in_stream_keep_V_read : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_in_stream_strb_V_read : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_in_stream_user_V_read : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_in_stream_last_V_read : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_in_stream_id_V_read : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_in_stream_dest_V_read : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_out_stream_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mult_accel_core_fu_58_out_stream_data_V_write : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_out_stream_keep_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mult_accel_core_fu_58_out_stream_keep_V_write : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_out_stream_strb_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mult_accel_core_fu_58_out_stream_strb_V_write : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_out_stream_user_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mult_accel_core_fu_58_out_stream_user_V_write : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_out_stream_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mult_accel_core_fu_58_out_stream_last_V_write : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_out_stream_id_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mult_accel_core_fu_58_out_stream_id_V_write : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_out_stream_dest_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mult_accel_core_fu_58_out_stream_dest_V_write : STD_LOGIC;
    signal grp_mult_accel_core_fu_58_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component mult_accel_core IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_data_V_empty_n : IN STD_LOGIC;
        in_stream_data_V_read : OUT STD_LOGIC;
        in_stream_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream_keep_V_empty_n : IN STD_LOGIC;
        in_stream_keep_V_read : OUT STD_LOGIC;
        in_stream_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream_strb_V_empty_n : IN STD_LOGIC;
        in_stream_strb_V_read : OUT STD_LOGIC;
        in_stream_user_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream_user_V_empty_n : IN STD_LOGIC;
        in_stream_user_V_read : OUT STD_LOGIC;
        in_stream_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        in_stream_last_V_empty_n : IN STD_LOGIC;
        in_stream_last_V_read : OUT STD_LOGIC;
        in_stream_id_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        in_stream_id_V_empty_n : IN STD_LOGIC;
        in_stream_id_V_read : OUT STD_LOGIC;
        in_stream_dest_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        in_stream_dest_V_empty_n : IN STD_LOGIC;
        in_stream_dest_V_read : OUT STD_LOGIC;
        out_stream_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_data_V_full_n : IN STD_LOGIC;
        out_stream_data_V_write : OUT STD_LOGIC;
        out_stream_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_stream_keep_V_full_n : IN STD_LOGIC;
        out_stream_keep_V_write : OUT STD_LOGIC;
        out_stream_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_stream_strb_V_full_n : IN STD_LOGIC;
        out_stream_strb_V_write : OUT STD_LOGIC;
        out_stream_user_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_stream_user_V_full_n : IN STD_LOGIC;
        out_stream_user_V_write : OUT STD_LOGIC;
        out_stream_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_stream_last_V_full_n : IN STD_LOGIC;
        out_stream_last_V_write : OUT STD_LOGIC;
        out_stream_id_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        out_stream_id_V_full_n : IN STD_LOGIC;
        out_stream_id_V_write : OUT STD_LOGIC;
        out_stream_dest_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        out_stream_dest_V_full_n : IN STD_LOGIC;
        out_stream_dest_V_write : OUT STD_LOGIC );
    end component;



begin
    grp_mult_accel_core_fu_58 : component mult_accel_core
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mult_accel_core_fu_58_ap_start,
        ap_done => grp_mult_accel_core_fu_58_ap_done,
        ap_idle => grp_mult_accel_core_fu_58_ap_idle,
        ap_ready => grp_mult_accel_core_fu_58_ap_ready,
        in_stream_data_V_dout => in_stream_data_V_dout,
        in_stream_data_V_empty_n => in_stream_data_V_empty_n,
        in_stream_data_V_read => grp_mult_accel_core_fu_58_in_stream_data_V_read,
        in_stream_keep_V_dout => in_stream_keep_V_dout,
        in_stream_keep_V_empty_n => in_stream_keep_V_empty_n,
        in_stream_keep_V_read => grp_mult_accel_core_fu_58_in_stream_keep_V_read,
        in_stream_strb_V_dout => in_stream_strb_V_dout,
        in_stream_strb_V_empty_n => in_stream_strb_V_empty_n,
        in_stream_strb_V_read => grp_mult_accel_core_fu_58_in_stream_strb_V_read,
        in_stream_user_V_dout => in_stream_user_V_dout,
        in_stream_user_V_empty_n => in_stream_user_V_empty_n,
        in_stream_user_V_read => grp_mult_accel_core_fu_58_in_stream_user_V_read,
        in_stream_last_V_dout => in_stream_last_V_dout,
        in_stream_last_V_empty_n => in_stream_last_V_empty_n,
        in_stream_last_V_read => grp_mult_accel_core_fu_58_in_stream_last_V_read,
        in_stream_id_V_dout => in_stream_id_V_dout,
        in_stream_id_V_empty_n => in_stream_id_V_empty_n,
        in_stream_id_V_read => grp_mult_accel_core_fu_58_in_stream_id_V_read,
        in_stream_dest_V_dout => in_stream_dest_V_dout,
        in_stream_dest_V_empty_n => in_stream_dest_V_empty_n,
        in_stream_dest_V_read => grp_mult_accel_core_fu_58_in_stream_dest_V_read,
        out_stream_data_V_din => grp_mult_accel_core_fu_58_out_stream_data_V_din,
        out_stream_data_V_full_n => out_stream_data_V_full_n,
        out_stream_data_V_write => grp_mult_accel_core_fu_58_out_stream_data_V_write,
        out_stream_keep_V_din => grp_mult_accel_core_fu_58_out_stream_keep_V_din,
        out_stream_keep_V_full_n => out_stream_keep_V_full_n,
        out_stream_keep_V_write => grp_mult_accel_core_fu_58_out_stream_keep_V_write,
        out_stream_strb_V_din => grp_mult_accel_core_fu_58_out_stream_strb_V_din,
        out_stream_strb_V_full_n => out_stream_strb_V_full_n,
        out_stream_strb_V_write => grp_mult_accel_core_fu_58_out_stream_strb_V_write,
        out_stream_user_V_din => grp_mult_accel_core_fu_58_out_stream_user_V_din,
        out_stream_user_V_full_n => out_stream_user_V_full_n,
        out_stream_user_V_write => grp_mult_accel_core_fu_58_out_stream_user_V_write,
        out_stream_last_V_din => grp_mult_accel_core_fu_58_out_stream_last_V_din,
        out_stream_last_V_full_n => out_stream_last_V_full_n,
        out_stream_last_V_write => grp_mult_accel_core_fu_58_out_stream_last_V_write,
        out_stream_id_V_din => grp_mult_accel_core_fu_58_out_stream_id_V_din,
        out_stream_id_V_full_n => out_stream_id_V_full_n,
        out_stream_id_V_write => grp_mult_accel_core_fu_58_out_stream_id_V_write,
        out_stream_dest_V_din => grp_mult_accel_core_fu_58_out_stream_dest_V_din,
        out_stream_dest_V_full_n => out_stream_dest_V_full_n,
        out_stream_dest_V_write => grp_mult_accel_core_fu_58_out_stream_dest_V_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mult_accel_core_fu_58_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mult_accel_core_fu_58_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_mult_accel_core_fu_58_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mult_accel_core_fu_58_ap_ready = ap_const_logic_1)) then 
                    grp_mult_accel_core_fu_58_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_mult_accel_core_fu_58_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_mult_accel_core_fu_58_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(grp_mult_accel_core_fu_58_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_mult_accel_core_fu_58_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_mult_accel_core_fu_58_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_mult_accel_core_fu_58_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_mult_accel_core_fu_58_ap_start <= grp_mult_accel_core_fu_58_ap_start_reg;

    in_stream_data_V_read_assign_proc : process(grp_mult_accel_core_fu_58_in_stream_data_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_stream_data_V_read <= grp_mult_accel_core_fu_58_in_stream_data_V_read;
        else 
            in_stream_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_dest_V_read_assign_proc : process(grp_mult_accel_core_fu_58_in_stream_dest_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_stream_dest_V_read <= grp_mult_accel_core_fu_58_in_stream_dest_V_read;
        else 
            in_stream_dest_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_id_V_read_assign_proc : process(grp_mult_accel_core_fu_58_in_stream_id_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_stream_id_V_read <= grp_mult_accel_core_fu_58_in_stream_id_V_read;
        else 
            in_stream_id_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_keep_V_read_assign_proc : process(grp_mult_accel_core_fu_58_in_stream_keep_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_stream_keep_V_read <= grp_mult_accel_core_fu_58_in_stream_keep_V_read;
        else 
            in_stream_keep_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_last_V_read_assign_proc : process(grp_mult_accel_core_fu_58_in_stream_last_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_stream_last_V_read <= grp_mult_accel_core_fu_58_in_stream_last_V_read;
        else 
            in_stream_last_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_strb_V_read_assign_proc : process(grp_mult_accel_core_fu_58_in_stream_strb_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_stream_strb_V_read <= grp_mult_accel_core_fu_58_in_stream_strb_V_read;
        else 
            in_stream_strb_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_user_V_read_assign_proc : process(grp_mult_accel_core_fu_58_in_stream_user_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_stream_user_V_read <= grp_mult_accel_core_fu_58_in_stream_user_V_read;
        else 
            in_stream_user_V_read <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_data_V_din <= grp_mult_accel_core_fu_58_out_stream_data_V_din;

    out_stream_data_V_write_assign_proc : process(grp_mult_accel_core_fu_58_out_stream_data_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_stream_data_V_write <= grp_mult_accel_core_fu_58_out_stream_data_V_write;
        else 
            out_stream_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_dest_V_din <= grp_mult_accel_core_fu_58_out_stream_dest_V_din;

    out_stream_dest_V_write_assign_proc : process(grp_mult_accel_core_fu_58_out_stream_dest_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_stream_dest_V_write <= grp_mult_accel_core_fu_58_out_stream_dest_V_write;
        else 
            out_stream_dest_V_write <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_id_V_din <= grp_mult_accel_core_fu_58_out_stream_id_V_din;

    out_stream_id_V_write_assign_proc : process(grp_mult_accel_core_fu_58_out_stream_id_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_stream_id_V_write <= grp_mult_accel_core_fu_58_out_stream_id_V_write;
        else 
            out_stream_id_V_write <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_keep_V_din <= grp_mult_accel_core_fu_58_out_stream_keep_V_din;

    out_stream_keep_V_write_assign_proc : process(grp_mult_accel_core_fu_58_out_stream_keep_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_stream_keep_V_write <= grp_mult_accel_core_fu_58_out_stream_keep_V_write;
        else 
            out_stream_keep_V_write <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_last_V_din <= grp_mult_accel_core_fu_58_out_stream_last_V_din;

    out_stream_last_V_write_assign_proc : process(grp_mult_accel_core_fu_58_out_stream_last_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_stream_last_V_write <= grp_mult_accel_core_fu_58_out_stream_last_V_write;
        else 
            out_stream_last_V_write <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_strb_V_din <= grp_mult_accel_core_fu_58_out_stream_strb_V_din;

    out_stream_strb_V_write_assign_proc : process(grp_mult_accel_core_fu_58_out_stream_strb_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_stream_strb_V_write <= grp_mult_accel_core_fu_58_out_stream_strb_V_write;
        else 
            out_stream_strb_V_write <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_user_V_din <= grp_mult_accel_core_fu_58_out_stream_user_V_din;

    out_stream_user_V_write_assign_proc : process(grp_mult_accel_core_fu_58_out_stream_user_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_stream_user_V_write <= grp_mult_accel_core_fu_58_out_stream_user_V_write;
        else 
            out_stream_user_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
