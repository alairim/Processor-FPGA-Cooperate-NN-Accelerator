// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mult_accel_core_HH_
#define _mult_accel_core_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "vector_multiply_hw.h"
#include "pop_stream.h"
#include "push_stream.h"
#include "mult_accel_core_a.h"

namespace ap_rtl {

struct mult_accel_core : public sc_module {
    // Port declarations 48
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in_stream_data_V_dout;
    sc_in< sc_logic > in_stream_data_V_empty_n;
    sc_out< sc_logic > in_stream_data_V_read;
    sc_in< sc_lv<4> > in_stream_keep_V_dout;
    sc_in< sc_logic > in_stream_keep_V_empty_n;
    sc_out< sc_logic > in_stream_keep_V_read;
    sc_in< sc_lv<4> > in_stream_strb_V_dout;
    sc_in< sc_logic > in_stream_strb_V_empty_n;
    sc_out< sc_logic > in_stream_strb_V_read;
    sc_in< sc_lv<4> > in_stream_user_V_dout;
    sc_in< sc_logic > in_stream_user_V_empty_n;
    sc_out< sc_logic > in_stream_user_V_read;
    sc_in< sc_lv<1> > in_stream_last_V_dout;
    sc_in< sc_logic > in_stream_last_V_empty_n;
    sc_out< sc_logic > in_stream_last_V_read;
    sc_in< sc_lv<5> > in_stream_id_V_dout;
    sc_in< sc_logic > in_stream_id_V_empty_n;
    sc_out< sc_logic > in_stream_id_V_read;
    sc_in< sc_lv<5> > in_stream_dest_V_dout;
    sc_in< sc_logic > in_stream_dest_V_empty_n;
    sc_out< sc_logic > in_stream_dest_V_read;
    sc_out< sc_lv<32> > out_stream_data_V_din;
    sc_in< sc_logic > out_stream_data_V_full_n;
    sc_out< sc_logic > out_stream_data_V_write;
    sc_out< sc_lv<4> > out_stream_keep_V_din;
    sc_in< sc_logic > out_stream_keep_V_full_n;
    sc_out< sc_logic > out_stream_keep_V_write;
    sc_out< sc_lv<4> > out_stream_strb_V_din;
    sc_in< sc_logic > out_stream_strb_V_full_n;
    sc_out< sc_logic > out_stream_strb_V_write;
    sc_out< sc_lv<4> > out_stream_user_V_din;
    sc_in< sc_logic > out_stream_user_V_full_n;
    sc_out< sc_logic > out_stream_user_V_write;
    sc_out< sc_lv<1> > out_stream_last_V_din;
    sc_in< sc_logic > out_stream_last_V_full_n;
    sc_out< sc_logic > out_stream_last_V_write;
    sc_out< sc_lv<5> > out_stream_id_V_din;
    sc_in< sc_logic > out_stream_id_V_full_n;
    sc_out< sc_logic > out_stream_id_V_write;
    sc_out< sc_lv<5> > out_stream_dest_V_din;
    sc_in< sc_logic > out_stream_dest_V_full_n;
    sc_out< sc_logic > out_stream_dest_V_write;


    // Module declarations
    mult_accel_core(sc_module_name name);
    SC_HAS_PROCESS(mult_accel_core);

    ~mult_accel_core();

    sc_trace_file* mVcdFile;

    mult_accel_core_a* a_U;
    mult_accel_core_a* b_U;
    vector_multiply_hw* grp_vector_multiply_hw_fu_193;
    pop_stream* grp_pop_stream_fu_199;
    push_stream* call_ret_push_stream_fu_219;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_data_V_blk_n;
    sc_signal< sc_logic > in_stream_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_keep_V_blk_n;
    sc_signal< sc_logic > in_stream_keep_V_blk_n;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_strb_V_blk_n;
    sc_signal< sc_logic > in_stream_strb_V_blk_n;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_user_V_blk_n;
    sc_signal< sc_logic > in_stream_user_V_blk_n;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_last_V_blk_n;
    sc_signal< sc_logic > in_stream_last_V_blk_n;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_id_V_blk_n;
    sc_signal< sc_logic > in_stream_id_V_blk_n;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_dest_V_blk_n;
    sc_signal< sc_logic > in_stream_dest_V_blk_n;
    sc_signal< sc_logic > out_stream_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > out_stream_keep_V_blk_n;
    sc_signal< sc_logic > out_stream_strb_V_blk_n;
    sc_signal< sc_logic > out_stream_user_V_blk_n;
    sc_signal< sc_logic > out_stream_last_V_blk_n;
    sc_signal< sc_logic > out_stream_id_V_blk_n;
    sc_signal< sc_logic > out_stream_dest_V_blk_n;
    sc_signal< sc_lv<10> > i_2_fu_232_p2;
    sc_signal< sc_lv<10> > i_2_reg_263;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > i_3_fu_249_p2;
    sc_signal< sc_lv<10> > i_3_reg_271;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<10> > a_address0;
    sc_signal< sc_logic > a_ce0;
    sc_signal< sc_logic > a_we0;
    sc_signal< sc_lv<32> > a_q0;
    sc_signal< sc_lv<10> > b_address0;
    sc_signal< sc_logic > b_ce0;
    sc_signal< sc_logic > b_we0;
    sc_signal< sc_lv<32> > b_q0;
    sc_signal< sc_logic > grp_vector_multiply_hw_fu_193_ap_start;
    sc_signal< sc_logic > grp_vector_multiply_hw_fu_193_ap_done;
    sc_signal< sc_logic > grp_vector_multiply_hw_fu_193_ap_idle;
    sc_signal< sc_logic > grp_vector_multiply_hw_fu_193_ap_ready;
    sc_signal< sc_lv<10> > grp_vector_multiply_hw_fu_193_a_address0;
    sc_signal< sc_logic > grp_vector_multiply_hw_fu_193_a_ce0;
    sc_signal< sc_lv<10> > grp_vector_multiply_hw_fu_193_b_address0;
    sc_signal< sc_logic > grp_vector_multiply_hw_fu_193_b_ce0;
    sc_signal< sc_lv<32> > grp_vector_multiply_hw_fu_193_ap_return;
    sc_signal< sc_logic > grp_pop_stream_fu_199_ap_start;
    sc_signal< sc_logic > grp_pop_stream_fu_199_ap_done;
    sc_signal< sc_logic > grp_pop_stream_fu_199_ap_idle;
    sc_signal< sc_logic > grp_pop_stream_fu_199_ap_ready;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_data_V_read;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_keep_V_read;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_strb_V_read;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_user_V_read;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_last_V_read;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_id_V_read;
    sc_signal< sc_logic > grp_pop_stream_fu_199_e_dest_V_read;
    sc_signal< sc_lv<32> > grp_pop_stream_fu_199_ap_return;
    sc_signal< sc_logic > call_ret_push_stream_fu_219_ap_ready;
    sc_signal< sc_lv<32> > call_ret_push_stream_fu_219_ap_return;
    sc_signal< sc_lv<10> > i_reg_169;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<10> > i1_reg_181;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<1> > exitcond1_fu_226_p2;
    sc_signal< sc_logic > grp_vector_multiply_hw_fu_193_ap_start_reg;
    sc_signal< sc_lv<1> > exitcond_fu_243_p2;
    sc_signal< sc_lv<64> > tmp_fu_238_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_255_p1;
    sc_signal< bool > ap_block_state6;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<10> ap_const_lv10_310;
    static const sc_lv<10> ap_const_lv10_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_a_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state3();
    void thread_ap_block_state5();
    void thread_ap_block_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_b_we0();
    void thread_exitcond1_fu_226_p2();
    void thread_exitcond_fu_243_p2();
    void thread_grp_pop_stream_fu_199_ap_start();
    void thread_grp_vector_multiply_hw_fu_193_ap_start();
    void thread_i_2_fu_232_p2();
    void thread_i_3_fu_249_p2();
    void thread_in_stream_data_V_blk_n();
    void thread_in_stream_data_V_read();
    void thread_in_stream_dest_V_blk_n();
    void thread_in_stream_dest_V_read();
    void thread_in_stream_id_V_blk_n();
    void thread_in_stream_id_V_read();
    void thread_in_stream_keep_V_blk_n();
    void thread_in_stream_keep_V_read();
    void thread_in_stream_last_V_blk_n();
    void thread_in_stream_last_V_read();
    void thread_in_stream_strb_V_blk_n();
    void thread_in_stream_strb_V_read();
    void thread_in_stream_user_V_blk_n();
    void thread_in_stream_user_V_read();
    void thread_out_stream_data_V_blk_n();
    void thread_out_stream_data_V_din();
    void thread_out_stream_data_V_write();
    void thread_out_stream_dest_V_blk_n();
    void thread_out_stream_dest_V_din();
    void thread_out_stream_dest_V_write();
    void thread_out_stream_id_V_blk_n();
    void thread_out_stream_id_V_din();
    void thread_out_stream_id_V_write();
    void thread_out_stream_keep_V_blk_n();
    void thread_out_stream_keep_V_din();
    void thread_out_stream_keep_V_write();
    void thread_out_stream_last_V_blk_n();
    void thread_out_stream_last_V_din();
    void thread_out_stream_last_V_write();
    void thread_out_stream_strb_V_blk_n();
    void thread_out_stream_strb_V_din();
    void thread_out_stream_strb_V_write();
    void thread_out_stream_user_V_blk_n();
    void thread_out_stream_user_V_din();
    void thread_out_stream_user_V_write();
    void thread_tmp_8_fu_255_p1();
    void thread_tmp_fu_238_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
