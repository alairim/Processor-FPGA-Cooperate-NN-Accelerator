// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mult_accel_core.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mult_accel_core::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mult_accel_core::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> mult_accel_core::ap_ST_fsm_state1 = "1";
const sc_lv<6> mult_accel_core::ap_ST_fsm_state2 = "10";
const sc_lv<6> mult_accel_core::ap_ST_fsm_state3 = "100";
const sc_lv<6> mult_accel_core::ap_ST_fsm_state4 = "1000";
const sc_lv<6> mult_accel_core::ap_ST_fsm_state5 = "10000";
const sc_lv<6> mult_accel_core::ap_ST_fsm_state6 = "100000";
const sc_lv<32> mult_accel_core::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mult_accel_core::ap_const_lv32_2 = "10";
const sc_lv<32> mult_accel_core::ap_const_lv32_4 = "100";
const sc_lv<32> mult_accel_core::ap_const_lv32_5 = "101";
const sc_lv<32> mult_accel_core::ap_const_lv32_1 = "1";
const sc_lv<32> mult_accel_core::ap_const_lv32_3 = "11";
const sc_lv<10> mult_accel_core::ap_const_lv10_0 = "0000000000";
const sc_lv<1> mult_accel_core::ap_const_lv1_1 = "1";
const sc_lv<4> mult_accel_core::ap_const_lv4_F = "1111";
const sc_lv<4> mult_accel_core::ap_const_lv4_0 = "0000";
const sc_lv<5> mult_accel_core::ap_const_lv5_0 = "00000";
const sc_lv<10> mult_accel_core::ap_const_lv10_310 = "1100010000";
const sc_lv<10> mult_accel_core::ap_const_lv10_1 = "1";
const bool mult_accel_core::ap_const_boolean_1 = true;

mult_accel_core::mult_accel_core(sc_module_name name) : sc_module(name), mVcdFile(0) {
    a_U = new mult_accel_core_a("a_U");
    a_U->clk(ap_clk);
    a_U->reset(ap_rst);
    a_U->address0(a_address0);
    a_U->ce0(a_ce0);
    a_U->we0(a_we0);
    a_U->d0(grp_pop_stream_fu_199_ap_return);
    a_U->q0(a_q0);
    b_U = new mult_accel_core_a("b_U");
    b_U->clk(ap_clk);
    b_U->reset(ap_rst);
    b_U->address0(b_address0);
    b_U->ce0(b_ce0);
    b_U->we0(b_we0);
    b_U->d0(grp_pop_stream_fu_199_ap_return);
    b_U->q0(b_q0);
    grp_vector_multiply_hw_fu_193 = new vector_multiply_hw("grp_vector_multiply_hw_fu_193");
    grp_vector_multiply_hw_fu_193->ap_clk(ap_clk);
    grp_vector_multiply_hw_fu_193->ap_rst(ap_rst);
    grp_vector_multiply_hw_fu_193->ap_start(grp_vector_multiply_hw_fu_193_ap_start);
    grp_vector_multiply_hw_fu_193->ap_done(grp_vector_multiply_hw_fu_193_ap_done);
    grp_vector_multiply_hw_fu_193->ap_idle(grp_vector_multiply_hw_fu_193_ap_idle);
    grp_vector_multiply_hw_fu_193->ap_ready(grp_vector_multiply_hw_fu_193_ap_ready);
    grp_vector_multiply_hw_fu_193->a_address0(grp_vector_multiply_hw_fu_193_a_address0);
    grp_vector_multiply_hw_fu_193->a_ce0(grp_vector_multiply_hw_fu_193_a_ce0);
    grp_vector_multiply_hw_fu_193->a_q0(a_q0);
    grp_vector_multiply_hw_fu_193->b_address0(grp_vector_multiply_hw_fu_193_b_address0);
    grp_vector_multiply_hw_fu_193->b_ce0(grp_vector_multiply_hw_fu_193_b_ce0);
    grp_vector_multiply_hw_fu_193->b_q0(b_q0);
    grp_vector_multiply_hw_fu_193->ap_return(grp_vector_multiply_hw_fu_193_ap_return);
    grp_pop_stream_fu_199 = new pop_stream("grp_pop_stream_fu_199");
    grp_pop_stream_fu_199->ap_clk(ap_clk);
    grp_pop_stream_fu_199->ap_rst(ap_rst);
    grp_pop_stream_fu_199->ap_start(grp_pop_stream_fu_199_ap_start);
    grp_pop_stream_fu_199->ap_done(grp_pop_stream_fu_199_ap_done);
    grp_pop_stream_fu_199->ap_idle(grp_pop_stream_fu_199_ap_idle);
    grp_pop_stream_fu_199->ap_ready(grp_pop_stream_fu_199_ap_ready);
    grp_pop_stream_fu_199->e_data_V_dout(in_stream_data_V_dout);
    grp_pop_stream_fu_199->e_data_V_empty_n(in_stream_data_V_empty_n);
    grp_pop_stream_fu_199->e_data_V_read(grp_pop_stream_fu_199_e_data_V_read);
    grp_pop_stream_fu_199->e_keep_V_dout(in_stream_keep_V_dout);
    grp_pop_stream_fu_199->e_keep_V_empty_n(in_stream_keep_V_empty_n);
    grp_pop_stream_fu_199->e_keep_V_read(grp_pop_stream_fu_199_e_keep_V_read);
    grp_pop_stream_fu_199->e_strb_V_dout(in_stream_strb_V_dout);
    grp_pop_stream_fu_199->e_strb_V_empty_n(in_stream_strb_V_empty_n);
    grp_pop_stream_fu_199->e_strb_V_read(grp_pop_stream_fu_199_e_strb_V_read);
    grp_pop_stream_fu_199->e_user_V_dout(in_stream_user_V_dout);
    grp_pop_stream_fu_199->e_user_V_empty_n(in_stream_user_V_empty_n);
    grp_pop_stream_fu_199->e_user_V_read(grp_pop_stream_fu_199_e_user_V_read);
    grp_pop_stream_fu_199->e_last_V_dout(in_stream_last_V_dout);
    grp_pop_stream_fu_199->e_last_V_empty_n(in_stream_last_V_empty_n);
    grp_pop_stream_fu_199->e_last_V_read(grp_pop_stream_fu_199_e_last_V_read);
    grp_pop_stream_fu_199->e_id_V_dout(in_stream_id_V_dout);
    grp_pop_stream_fu_199->e_id_V_empty_n(in_stream_id_V_empty_n);
    grp_pop_stream_fu_199->e_id_V_read(grp_pop_stream_fu_199_e_id_V_read);
    grp_pop_stream_fu_199->e_dest_V_dout(in_stream_dest_V_dout);
    grp_pop_stream_fu_199->e_dest_V_empty_n(in_stream_dest_V_empty_n);
    grp_pop_stream_fu_199->e_dest_V_read(grp_pop_stream_fu_199_e_dest_V_read);
    grp_pop_stream_fu_199->ap_return(grp_pop_stream_fu_199_ap_return);
    grp_pop_stream_fu_199->e_data_V_blk_n(grp_pop_stream_fu_199_e_data_V_blk_n);
    grp_pop_stream_fu_199->e_keep_V_blk_n(grp_pop_stream_fu_199_e_keep_V_blk_n);
    grp_pop_stream_fu_199->e_strb_V_blk_n(grp_pop_stream_fu_199_e_strb_V_blk_n);
    grp_pop_stream_fu_199->e_user_V_blk_n(grp_pop_stream_fu_199_e_user_V_blk_n);
    grp_pop_stream_fu_199->e_last_V_blk_n(grp_pop_stream_fu_199_e_last_V_blk_n);
    grp_pop_stream_fu_199->e_id_V_blk_n(grp_pop_stream_fu_199_e_id_V_blk_n);
    grp_pop_stream_fu_199->e_dest_V_blk_n(grp_pop_stream_fu_199_e_dest_V_blk_n);
    call_ret_push_stream_fu_219 = new push_stream("call_ret_push_stream_fu_219");
    call_ret_push_stream_fu_219->ap_ready(call_ret_push_stream_fu_219_ap_ready);
    call_ret_push_stream_fu_219->v_read(grp_vector_multiply_hw_fu_193_ap_return);
    call_ret_push_stream_fu_219->ap_return(call_ret_push_stream_fu_219_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_a_address0 );
    sensitive << ( tmp_fu_238_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( grp_pop_stream_fu_199_e_data_V_blk_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_pop_stream_fu_199_e_keep_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_strb_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_user_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_last_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_id_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_dest_V_blk_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_a_ce0 );

    SC_METHOD(thread_a_we0);
    sensitive << ( grp_pop_stream_fu_199_e_data_V_blk_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_pop_stream_fu_199_e_keep_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_strb_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_user_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_last_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_id_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_dest_V_blk_n );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( grp_pop_stream_fu_199_e_data_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_keep_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_strb_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_user_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_last_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_id_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_dest_V_blk_n );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( grp_pop_stream_fu_199_e_data_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_keep_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_strb_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_user_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_last_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_id_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_dest_V_blk_n );

    SC_METHOD(thread_ap_block_state6);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_b_address0 );
    sensitive << ( tmp_8_fu_255_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( grp_pop_stream_fu_199_e_data_V_blk_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_keep_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_strb_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_user_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_last_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_id_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_dest_V_blk_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_b_ce0 );

    SC_METHOD(thread_b_we0);
    sensitive << ( grp_pop_stream_fu_199_e_data_V_blk_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_keep_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_strb_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_user_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_last_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_id_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_dest_V_blk_n );

    SC_METHOD(thread_exitcond1_fu_226_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_169 );

    SC_METHOD(thread_exitcond_fu_243_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i1_reg_181 );

    SC_METHOD(thread_grp_pop_stream_fu_199_ap_start);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_vector_multiply_hw_fu_193_ap_start);
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_start_reg );

    SC_METHOD(thread_i_2_fu_232_p2);
    sensitive << ( i_reg_169 );

    SC_METHOD(thread_i_3_fu_249_p2);
    sensitive << ( i1_reg_181 );

    SC_METHOD(thread_in_stream_data_V_blk_n);
    sensitive << ( grp_pop_stream_fu_199_e_data_V_blk_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_in_stream_data_V_read);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_data_V_read );

    SC_METHOD(thread_in_stream_dest_V_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_dest_V_blk_n );

    SC_METHOD(thread_in_stream_dest_V_read);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_dest_V_read );

    SC_METHOD(thread_in_stream_id_V_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_id_V_blk_n );

    SC_METHOD(thread_in_stream_id_V_read);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_id_V_read );

    SC_METHOD(thread_in_stream_keep_V_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_keep_V_blk_n );

    SC_METHOD(thread_in_stream_keep_V_read);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_keep_V_read );

    SC_METHOD(thread_in_stream_last_V_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_last_V_blk_n );

    SC_METHOD(thread_in_stream_last_V_read);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_last_V_read );

    SC_METHOD(thread_in_stream_strb_V_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_strb_V_blk_n );

    SC_METHOD(thread_in_stream_strb_V_read);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_strb_V_read );

    SC_METHOD(thread_in_stream_user_V_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_user_V_blk_n );

    SC_METHOD(thread_in_stream_user_V_read);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_user_V_read );

    SC_METHOD(thread_out_stream_data_V_blk_n);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_stream_data_V_din);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );
    sensitive << ( call_ret_push_stream_fu_219_ap_return );

    SC_METHOD(thread_out_stream_data_V_write);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_dest_V_blk_n);
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_stream_dest_V_din);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_dest_V_write);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_id_V_blk_n);
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_stream_id_V_din);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_id_V_write);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_keep_V_blk_n);
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_stream_keep_V_din);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_keep_V_write);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_last_V_blk_n);
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_stream_last_V_din);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_last_V_write);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_strb_V_blk_n);
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_stream_strb_V_din);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_strb_V_write);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_user_V_blk_n);
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_stream_user_V_din);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_out_stream_user_V_write);
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );

    SC_METHOD(thread_tmp_8_fu_255_p1);
    sensitive << ( i1_reg_181 );

    SC_METHOD(thread_tmp_fu_238_p1);
    sensitive << ( i_reg_169 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_data_V_full_n );
    sensitive << ( out_stream_keep_V_full_n );
    sensitive << ( out_stream_strb_V_full_n );
    sensitive << ( out_stream_user_V_full_n );
    sensitive << ( out_stream_last_V_full_n );
    sensitive << ( out_stream_id_V_full_n );
    sensitive << ( out_stream_dest_V_full_n );
    sensitive << ( grp_pop_stream_fu_199_e_data_V_blk_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_pop_stream_fu_199_e_keep_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_strb_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_user_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_last_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_id_V_blk_n );
    sensitive << ( grp_pop_stream_fu_199_e_dest_V_blk_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_vector_multiply_hw_fu_193_ap_done );
    sensitive << ( exitcond1_fu_226_p2 );
    sensitive << ( exitcond_fu_243_p2 );

    ap_CS_fsm = "000001";
    grp_vector_multiply_hw_fu_193_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mult_accel_core_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_stream_data_V_dout, "(port)in_stream_data_V_dout");
    sc_trace(mVcdFile, in_stream_data_V_empty_n, "(port)in_stream_data_V_empty_n");
    sc_trace(mVcdFile, in_stream_data_V_read, "(port)in_stream_data_V_read");
    sc_trace(mVcdFile, in_stream_keep_V_dout, "(port)in_stream_keep_V_dout");
    sc_trace(mVcdFile, in_stream_keep_V_empty_n, "(port)in_stream_keep_V_empty_n");
    sc_trace(mVcdFile, in_stream_keep_V_read, "(port)in_stream_keep_V_read");
    sc_trace(mVcdFile, in_stream_strb_V_dout, "(port)in_stream_strb_V_dout");
    sc_trace(mVcdFile, in_stream_strb_V_empty_n, "(port)in_stream_strb_V_empty_n");
    sc_trace(mVcdFile, in_stream_strb_V_read, "(port)in_stream_strb_V_read");
    sc_trace(mVcdFile, in_stream_user_V_dout, "(port)in_stream_user_V_dout");
    sc_trace(mVcdFile, in_stream_user_V_empty_n, "(port)in_stream_user_V_empty_n");
    sc_trace(mVcdFile, in_stream_user_V_read, "(port)in_stream_user_V_read");
    sc_trace(mVcdFile, in_stream_last_V_dout, "(port)in_stream_last_V_dout");
    sc_trace(mVcdFile, in_stream_last_V_empty_n, "(port)in_stream_last_V_empty_n");
    sc_trace(mVcdFile, in_stream_last_V_read, "(port)in_stream_last_V_read");
    sc_trace(mVcdFile, in_stream_id_V_dout, "(port)in_stream_id_V_dout");
    sc_trace(mVcdFile, in_stream_id_V_empty_n, "(port)in_stream_id_V_empty_n");
    sc_trace(mVcdFile, in_stream_id_V_read, "(port)in_stream_id_V_read");
    sc_trace(mVcdFile, in_stream_dest_V_dout, "(port)in_stream_dest_V_dout");
    sc_trace(mVcdFile, in_stream_dest_V_empty_n, "(port)in_stream_dest_V_empty_n");
    sc_trace(mVcdFile, in_stream_dest_V_read, "(port)in_stream_dest_V_read");
    sc_trace(mVcdFile, out_stream_data_V_din, "(port)out_stream_data_V_din");
    sc_trace(mVcdFile, out_stream_data_V_full_n, "(port)out_stream_data_V_full_n");
    sc_trace(mVcdFile, out_stream_data_V_write, "(port)out_stream_data_V_write");
    sc_trace(mVcdFile, out_stream_keep_V_din, "(port)out_stream_keep_V_din");
    sc_trace(mVcdFile, out_stream_keep_V_full_n, "(port)out_stream_keep_V_full_n");
    sc_trace(mVcdFile, out_stream_keep_V_write, "(port)out_stream_keep_V_write");
    sc_trace(mVcdFile, out_stream_strb_V_din, "(port)out_stream_strb_V_din");
    sc_trace(mVcdFile, out_stream_strb_V_full_n, "(port)out_stream_strb_V_full_n");
    sc_trace(mVcdFile, out_stream_strb_V_write, "(port)out_stream_strb_V_write");
    sc_trace(mVcdFile, out_stream_user_V_din, "(port)out_stream_user_V_din");
    sc_trace(mVcdFile, out_stream_user_V_full_n, "(port)out_stream_user_V_full_n");
    sc_trace(mVcdFile, out_stream_user_V_write, "(port)out_stream_user_V_write");
    sc_trace(mVcdFile, out_stream_last_V_din, "(port)out_stream_last_V_din");
    sc_trace(mVcdFile, out_stream_last_V_full_n, "(port)out_stream_last_V_full_n");
    sc_trace(mVcdFile, out_stream_last_V_write, "(port)out_stream_last_V_write");
    sc_trace(mVcdFile, out_stream_id_V_din, "(port)out_stream_id_V_din");
    sc_trace(mVcdFile, out_stream_id_V_full_n, "(port)out_stream_id_V_full_n");
    sc_trace(mVcdFile, out_stream_id_V_write, "(port)out_stream_id_V_write");
    sc_trace(mVcdFile, out_stream_dest_V_din, "(port)out_stream_dest_V_din");
    sc_trace(mVcdFile, out_stream_dest_V_full_n, "(port)out_stream_dest_V_full_n");
    sc_trace(mVcdFile, out_stream_dest_V_write, "(port)out_stream_dest_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_data_V_blk_n, "grp_pop_stream_fu_199_e_data_V_blk_n");
    sc_trace(mVcdFile, in_stream_data_V_blk_n, "in_stream_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_keep_V_blk_n, "grp_pop_stream_fu_199_e_keep_V_blk_n");
    sc_trace(mVcdFile, in_stream_keep_V_blk_n, "in_stream_keep_V_blk_n");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_strb_V_blk_n, "grp_pop_stream_fu_199_e_strb_V_blk_n");
    sc_trace(mVcdFile, in_stream_strb_V_blk_n, "in_stream_strb_V_blk_n");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_user_V_blk_n, "grp_pop_stream_fu_199_e_user_V_blk_n");
    sc_trace(mVcdFile, in_stream_user_V_blk_n, "in_stream_user_V_blk_n");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_last_V_blk_n, "grp_pop_stream_fu_199_e_last_V_blk_n");
    sc_trace(mVcdFile, in_stream_last_V_blk_n, "in_stream_last_V_blk_n");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_id_V_blk_n, "grp_pop_stream_fu_199_e_id_V_blk_n");
    sc_trace(mVcdFile, in_stream_id_V_blk_n, "in_stream_id_V_blk_n");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_dest_V_blk_n, "grp_pop_stream_fu_199_e_dest_V_blk_n");
    sc_trace(mVcdFile, in_stream_dest_V_blk_n, "in_stream_dest_V_blk_n");
    sc_trace(mVcdFile, out_stream_data_V_blk_n, "out_stream_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, out_stream_keep_V_blk_n, "out_stream_keep_V_blk_n");
    sc_trace(mVcdFile, out_stream_strb_V_blk_n, "out_stream_strb_V_blk_n");
    sc_trace(mVcdFile, out_stream_user_V_blk_n, "out_stream_user_V_blk_n");
    sc_trace(mVcdFile, out_stream_last_V_blk_n, "out_stream_last_V_blk_n");
    sc_trace(mVcdFile, out_stream_id_V_blk_n, "out_stream_id_V_blk_n");
    sc_trace(mVcdFile, out_stream_dest_V_blk_n, "out_stream_dest_V_blk_n");
    sc_trace(mVcdFile, i_2_fu_232_p2, "i_2_fu_232_p2");
    sc_trace(mVcdFile, i_2_reg_263, "i_2_reg_263");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_3_fu_249_p2, "i_3_fu_249_p2");
    sc_trace(mVcdFile, i_3_reg_271, "i_3_reg_271");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, a_address0, "a_address0");
    sc_trace(mVcdFile, a_ce0, "a_ce0");
    sc_trace(mVcdFile, a_we0, "a_we0");
    sc_trace(mVcdFile, a_q0, "a_q0");
    sc_trace(mVcdFile, b_address0, "b_address0");
    sc_trace(mVcdFile, b_ce0, "b_ce0");
    sc_trace(mVcdFile, b_we0, "b_we0");
    sc_trace(mVcdFile, b_q0, "b_q0");
    sc_trace(mVcdFile, grp_vector_multiply_hw_fu_193_ap_start, "grp_vector_multiply_hw_fu_193_ap_start");
    sc_trace(mVcdFile, grp_vector_multiply_hw_fu_193_ap_done, "grp_vector_multiply_hw_fu_193_ap_done");
    sc_trace(mVcdFile, grp_vector_multiply_hw_fu_193_ap_idle, "grp_vector_multiply_hw_fu_193_ap_idle");
    sc_trace(mVcdFile, grp_vector_multiply_hw_fu_193_ap_ready, "grp_vector_multiply_hw_fu_193_ap_ready");
    sc_trace(mVcdFile, grp_vector_multiply_hw_fu_193_a_address0, "grp_vector_multiply_hw_fu_193_a_address0");
    sc_trace(mVcdFile, grp_vector_multiply_hw_fu_193_a_ce0, "grp_vector_multiply_hw_fu_193_a_ce0");
    sc_trace(mVcdFile, grp_vector_multiply_hw_fu_193_b_address0, "grp_vector_multiply_hw_fu_193_b_address0");
    sc_trace(mVcdFile, grp_vector_multiply_hw_fu_193_b_ce0, "grp_vector_multiply_hw_fu_193_b_ce0");
    sc_trace(mVcdFile, grp_vector_multiply_hw_fu_193_ap_return, "grp_vector_multiply_hw_fu_193_ap_return");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_ap_start, "grp_pop_stream_fu_199_ap_start");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_ap_done, "grp_pop_stream_fu_199_ap_done");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_ap_idle, "grp_pop_stream_fu_199_ap_idle");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_ap_ready, "grp_pop_stream_fu_199_ap_ready");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_data_V_read, "grp_pop_stream_fu_199_e_data_V_read");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_keep_V_read, "grp_pop_stream_fu_199_e_keep_V_read");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_strb_V_read, "grp_pop_stream_fu_199_e_strb_V_read");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_user_V_read, "grp_pop_stream_fu_199_e_user_V_read");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_last_V_read, "grp_pop_stream_fu_199_e_last_V_read");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_id_V_read, "grp_pop_stream_fu_199_e_id_V_read");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_e_dest_V_read, "grp_pop_stream_fu_199_e_dest_V_read");
    sc_trace(mVcdFile, grp_pop_stream_fu_199_ap_return, "grp_pop_stream_fu_199_ap_return");
    sc_trace(mVcdFile, call_ret_push_stream_fu_219_ap_ready, "call_ret_push_stream_fu_219_ap_ready");
    sc_trace(mVcdFile, call_ret_push_stream_fu_219_ap_return, "call_ret_push_stream_fu_219_ap_return");
    sc_trace(mVcdFile, i_reg_169, "i_reg_169");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, i1_reg_181, "i1_reg_181");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, exitcond1_fu_226_p2, "exitcond1_fu_226_p2");
    sc_trace(mVcdFile, grp_vector_multiply_hw_fu_193_ap_start_reg, "grp_vector_multiply_hw_fu_193_ap_start_reg");
    sc_trace(mVcdFile, exitcond_fu_243_p2, "exitcond_fu_243_p2");
    sc_trace(mVcdFile, tmp_fu_238_p1, "tmp_fu_238_p1");
    sc_trace(mVcdFile, tmp_8_fu_255_p1, "tmp_8_fu_255_p1");
    sc_trace(mVcdFile, ap_block_state6, "ap_block_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

mult_accel_core::~mult_accel_core() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete a_U;
    delete b_U;
    delete grp_vector_multiply_hw_fu_193;
    delete grp_pop_stream_fu_199;
    delete call_ret_push_stream_fu_219;
}

void mult_accel_core::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_vector_multiply_hw_fu_193_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_243_p2.read()))) {
            grp_vector_multiply_hw_fu_193_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_vector_multiply_hw_fu_193_ap_ready.read())) {
            grp_vector_multiply_hw_fu_193_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_226_p2.read(), ap_const_lv1_1))) {
        i1_reg_181 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_data_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_keep_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_strb_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_user_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_last_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_id_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_dest_V_blk_n.read())))) {
        i1_reg_181 = i_3_reg_271.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_data_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_keep_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_strb_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_user_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_last_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_id_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_dest_V_blk_n.read())))) {
        i_reg_169 = i_2_reg_263.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_169 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_2_reg_263 = i_2_fu_232_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_3_reg_271 = i_3_fu_249_p2.read();
    }
}

void mult_accel_core::thread_a_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_address0 =  (sc_lv<10>) (tmp_fu_238_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        a_address0 = grp_vector_multiply_hw_fu_193_a_address0.read();
    } else {
        a_address0 = "XXXXXXXXXX";
    }
}

void mult_accel_core::thread_a_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_data_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_keep_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_strb_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_user_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_last_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_id_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_dest_V_blk_n.read())))) {
        a_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        a_ce0 = grp_vector_multiply_hw_fu_193_a_ce0.read();
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void mult_accel_core::thread_a_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_data_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_keep_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_strb_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_user_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_last_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_id_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_dest_V_blk_n.read())))) {
        a_we0 = ap_const_logic_1;
    } else {
        a_we0 = ap_const_logic_0;
    }
}

void mult_accel_core::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mult_accel_core::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mult_accel_core::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mult_accel_core::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mult_accel_core::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mult_accel_core::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mult_accel_core::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_data_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_keep_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_strb_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_user_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_last_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_id_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_dest_V_blk_n.read()));
}

void mult_accel_core::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_data_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_keep_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_strb_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_user_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_last_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_id_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_dest_V_blk_n.read()));
}

void mult_accel_core::thread_ap_block_state6() {
    ap_block_state6 = (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()));
}

void mult_accel_core::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_vector_multiply_hw_fu_193_ap_done.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mult_accel_core::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mult_accel_core::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_vector_multiply_hw_fu_193_ap_done.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mult_accel_core::thread_b_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        b_address0 =  (sc_lv<10>) (tmp_8_fu_255_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        b_address0 = grp_vector_multiply_hw_fu_193_b_address0.read();
    } else {
        b_address0 = "XXXXXXXXXX";
    }
}

void mult_accel_core::thread_b_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_data_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_keep_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_strb_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_user_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_last_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_id_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_dest_V_blk_n.read())))) {
        b_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        b_ce0 = grp_vector_multiply_hw_fu_193_b_ce0.read();
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void mult_accel_core::thread_b_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_data_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_keep_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_strb_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_user_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_last_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_id_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_dest_V_blk_n.read())))) {
        b_we0 = ap_const_logic_1;
    } else {
        b_we0 = ap_const_logic_0;
    }
}

void mult_accel_core::thread_exitcond1_fu_226_p2() {
    exitcond1_fu_226_p2 = (!i_reg_169.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_169.read() == ap_const_lv10_310);
}

void mult_accel_core::thread_exitcond_fu_243_p2() {
    exitcond_fu_243_p2 = (!i1_reg_181.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_181.read() == ap_const_lv10_310);
}

void mult_accel_core::thread_grp_pop_stream_fu_199_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_pop_stream_fu_199_ap_start = ap_const_logic_1;
    } else {
        grp_pop_stream_fu_199_ap_start = ap_const_logic_0;
    }
}

void mult_accel_core::thread_grp_vector_multiply_hw_fu_193_ap_start() {
    grp_vector_multiply_hw_fu_193_ap_start = grp_vector_multiply_hw_fu_193_ap_start_reg.read();
}

void mult_accel_core::thread_i_2_fu_232_p2() {
    i_2_fu_232_p2 = (!i_reg_169.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_169.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void mult_accel_core::thread_i_3_fu_249_p2() {
    i_3_fu_249_p2 = (!i1_reg_181.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i1_reg_181.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void mult_accel_core::thread_in_stream_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_data_V_blk_n = grp_pop_stream_fu_199_e_data_V_blk_n.read();
    } else {
        in_stream_data_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_in_stream_data_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_data_V_read = grp_pop_stream_fu_199_e_data_V_read.read();
    } else {
        in_stream_data_V_read = ap_const_logic_0;
    }
}

void mult_accel_core::thread_in_stream_dest_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_dest_V_blk_n = grp_pop_stream_fu_199_e_dest_V_blk_n.read();
    } else {
        in_stream_dest_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_in_stream_dest_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_dest_V_read = grp_pop_stream_fu_199_e_dest_V_read.read();
    } else {
        in_stream_dest_V_read = ap_const_logic_0;
    }
}

void mult_accel_core::thread_in_stream_id_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_id_V_blk_n = grp_pop_stream_fu_199_e_id_V_blk_n.read();
    } else {
        in_stream_id_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_in_stream_id_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_id_V_read = grp_pop_stream_fu_199_e_id_V_read.read();
    } else {
        in_stream_id_V_read = ap_const_logic_0;
    }
}

void mult_accel_core::thread_in_stream_keep_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_keep_V_blk_n = grp_pop_stream_fu_199_e_keep_V_blk_n.read();
    } else {
        in_stream_keep_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_in_stream_keep_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_keep_V_read = grp_pop_stream_fu_199_e_keep_V_read.read();
    } else {
        in_stream_keep_V_read = ap_const_logic_0;
    }
}

void mult_accel_core::thread_in_stream_last_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_last_V_blk_n = grp_pop_stream_fu_199_e_last_V_blk_n.read();
    } else {
        in_stream_last_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_in_stream_last_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_last_V_read = grp_pop_stream_fu_199_e_last_V_read.read();
    } else {
        in_stream_last_V_read = ap_const_logic_0;
    }
}

void mult_accel_core::thread_in_stream_strb_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_strb_V_blk_n = grp_pop_stream_fu_199_e_strb_V_blk_n.read();
    } else {
        in_stream_strb_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_in_stream_strb_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_strb_V_read = grp_pop_stream_fu_199_e_strb_V_read.read();
    } else {
        in_stream_strb_V_read = ap_const_logic_0;
    }
}

void mult_accel_core::thread_in_stream_user_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_user_V_blk_n = grp_pop_stream_fu_199_e_user_V_blk_n.read();
    } else {
        in_stream_user_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_in_stream_user_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_user_V_read = grp_pop_stream_fu_199_e_user_V_read.read();
    } else {
        in_stream_user_V_read = ap_const_logic_0;
    }
}

void mult_accel_core::thread_out_stream_data_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_stream_data_V_blk_n = out_stream_data_V_full_n.read();
    } else {
        out_stream_data_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_out_stream_data_V_din() {
    out_stream_data_V_din = call_ret_push_stream_fu_219_ap_return.read();
}

void mult_accel_core::thread_out_stream_data_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_vector_multiply_hw_fu_193_ap_done.read())))) {
        out_stream_data_V_write = ap_const_logic_1;
    } else {
        out_stream_data_V_write = ap_const_logic_0;
    }
}

void mult_accel_core::thread_out_stream_dest_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_stream_dest_V_blk_n = out_stream_dest_V_full_n.read();
    } else {
        out_stream_dest_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_out_stream_dest_V_din() {
    out_stream_dest_V_din = ap_const_lv5_0;
}

void mult_accel_core::thread_out_stream_dest_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_vector_multiply_hw_fu_193_ap_done.read())))) {
        out_stream_dest_V_write = ap_const_logic_1;
    } else {
        out_stream_dest_V_write = ap_const_logic_0;
    }
}

void mult_accel_core::thread_out_stream_id_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_stream_id_V_blk_n = out_stream_id_V_full_n.read();
    } else {
        out_stream_id_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_out_stream_id_V_din() {
    out_stream_id_V_din = ap_const_lv5_0;
}

void mult_accel_core::thread_out_stream_id_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_vector_multiply_hw_fu_193_ap_done.read())))) {
        out_stream_id_V_write = ap_const_logic_1;
    } else {
        out_stream_id_V_write = ap_const_logic_0;
    }
}

void mult_accel_core::thread_out_stream_keep_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_stream_keep_V_blk_n = out_stream_keep_V_full_n.read();
    } else {
        out_stream_keep_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_out_stream_keep_V_din() {
    out_stream_keep_V_din = ap_const_lv4_F;
}

void mult_accel_core::thread_out_stream_keep_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_vector_multiply_hw_fu_193_ap_done.read())))) {
        out_stream_keep_V_write = ap_const_logic_1;
    } else {
        out_stream_keep_V_write = ap_const_logic_0;
    }
}

void mult_accel_core::thread_out_stream_last_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_stream_last_V_blk_n = out_stream_last_V_full_n.read();
    } else {
        out_stream_last_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_out_stream_last_V_din() {
    out_stream_last_V_din = ap_const_lv1_1;
}

void mult_accel_core::thread_out_stream_last_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_vector_multiply_hw_fu_193_ap_done.read())))) {
        out_stream_last_V_write = ap_const_logic_1;
    } else {
        out_stream_last_V_write = ap_const_logic_0;
    }
}

void mult_accel_core::thread_out_stream_strb_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_stream_strb_V_blk_n = out_stream_strb_V_full_n.read();
    } else {
        out_stream_strb_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_out_stream_strb_V_din() {
    out_stream_strb_V_din = ap_const_lv4_F;
}

void mult_accel_core::thread_out_stream_strb_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_vector_multiply_hw_fu_193_ap_done.read())))) {
        out_stream_strb_V_write = ap_const_logic_1;
    } else {
        out_stream_strb_V_write = ap_const_logic_0;
    }
}

void mult_accel_core::thread_out_stream_user_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_stream_user_V_blk_n = out_stream_user_V_full_n.read();
    } else {
        out_stream_user_V_blk_n = ap_const_logic_1;
    }
}

void mult_accel_core::thread_out_stream_user_V_din() {
    out_stream_user_V_din = ap_const_lv4_0;
}

void mult_accel_core::thread_out_stream_user_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_vector_multiply_hw_fu_193_ap_done.read())))) {
        out_stream_user_V_write = ap_const_logic_1;
    } else {
        out_stream_user_V_write = ap_const_logic_0;
    }
}

void mult_accel_core::thread_tmp_8_fu_255_p1() {
    tmp_8_fu_255_p1 = esl_zext<64,10>(i1_reg_181.read());
}

void mult_accel_core::thread_tmp_fu_238_p1() {
    tmp_fu_238_p1 = esl_zext<64,10>(i_reg_169.read());
}

void mult_accel_core::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_226_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_data_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_keep_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_strb_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_user_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_last_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_id_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_dest_V_blk_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_243_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_data_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_keep_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_strb_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_user_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_last_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_id_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_pop_stream_fu_199_e_dest_V_blk_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_vector_multiply_hw_fu_193_ap_done.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

