// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mult_accel_core_call_HH_
#define _mult_accel_core_call_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mult_accel_core.h"

namespace ap_rtl {

struct mult_accel_core_call : public sc_module {
    // Port declarations 48
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in_stream_data_V_dout;
    sc_in< sc_logic > in_stream_data_V_empty_n;
    sc_out< sc_logic > in_stream_data_V_read;
    sc_in< sc_lv<4> > in_stream_keep_V_dout;
    sc_in< sc_logic > in_stream_keep_V_empty_n;
    sc_out< sc_logic > in_stream_keep_V_read;
    sc_in< sc_lv<4> > in_stream_strb_V_dout;
    sc_in< sc_logic > in_stream_strb_V_empty_n;
    sc_out< sc_logic > in_stream_strb_V_read;
    sc_in< sc_lv<4> > in_stream_user_V_dout;
    sc_in< sc_logic > in_stream_user_V_empty_n;
    sc_out< sc_logic > in_stream_user_V_read;
    sc_in< sc_lv<1> > in_stream_last_V_dout;
    sc_in< sc_logic > in_stream_last_V_empty_n;
    sc_out< sc_logic > in_stream_last_V_read;
    sc_in< sc_lv<5> > in_stream_id_V_dout;
    sc_in< sc_logic > in_stream_id_V_empty_n;
    sc_out< sc_logic > in_stream_id_V_read;
    sc_in< sc_lv<5> > in_stream_dest_V_dout;
    sc_in< sc_logic > in_stream_dest_V_empty_n;
    sc_out< sc_logic > in_stream_dest_V_read;
    sc_out< sc_lv<32> > out_stream_data_V_din;
    sc_in< sc_logic > out_stream_data_V_full_n;
    sc_out< sc_logic > out_stream_data_V_write;
    sc_out< sc_lv<4> > out_stream_keep_V_din;
    sc_in< sc_logic > out_stream_keep_V_full_n;
    sc_out< sc_logic > out_stream_keep_V_write;
    sc_out< sc_lv<4> > out_stream_strb_V_din;
    sc_in< sc_logic > out_stream_strb_V_full_n;
    sc_out< sc_logic > out_stream_strb_V_write;
    sc_out< sc_lv<4> > out_stream_user_V_din;
    sc_in< sc_logic > out_stream_user_V_full_n;
    sc_out< sc_logic > out_stream_user_V_write;
    sc_out< sc_lv<1> > out_stream_last_V_din;
    sc_in< sc_logic > out_stream_last_V_full_n;
    sc_out< sc_logic > out_stream_last_V_write;
    sc_out< sc_lv<5> > out_stream_id_V_din;
    sc_in< sc_logic > out_stream_id_V_full_n;
    sc_out< sc_logic > out_stream_id_V_write;
    sc_out< sc_lv<5> > out_stream_dest_V_din;
    sc_in< sc_logic > out_stream_dest_V_full_n;
    sc_out< sc_logic > out_stream_dest_V_write;


    // Module declarations
    mult_accel_core_call(sc_module_name name);
    SC_HAS_PROCESS(mult_accel_core_call);

    ~mult_accel_core_call();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mult_accel_core* grp_mult_accel_core_fu_58;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_ap_start;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_ap_done;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_ap_idle;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_ap_ready;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_in_stream_data_V_read;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_in_stream_keep_V_read;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_in_stream_strb_V_read;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_in_stream_user_V_read;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_in_stream_last_V_read;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_in_stream_id_V_read;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_in_stream_dest_V_read;
    sc_signal< sc_lv<32> > grp_mult_accel_core_fu_58_out_stream_data_V_din;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_out_stream_data_V_write;
    sc_signal< sc_lv<4> > grp_mult_accel_core_fu_58_out_stream_keep_V_din;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_out_stream_keep_V_write;
    sc_signal< sc_lv<4> > grp_mult_accel_core_fu_58_out_stream_strb_V_din;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_out_stream_strb_V_write;
    sc_signal< sc_lv<4> > grp_mult_accel_core_fu_58_out_stream_user_V_din;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_out_stream_user_V_write;
    sc_signal< sc_lv<1> > grp_mult_accel_core_fu_58_out_stream_last_V_din;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_out_stream_last_V_write;
    sc_signal< sc_lv<5> > grp_mult_accel_core_fu_58_out_stream_id_V_din;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_out_stream_id_V_write;
    sc_signal< sc_lv<5> > grp_mult_accel_core_fu_58_out_stream_dest_V_din;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_out_stream_dest_V_write;
    sc_signal< sc_logic > grp_mult_accel_core_fu_58_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_mult_accel_core_fu_58_ap_start();
    void thread_in_stream_data_V_read();
    void thread_in_stream_dest_V_read();
    void thread_in_stream_id_V_read();
    void thread_in_stream_keep_V_read();
    void thread_in_stream_last_V_read();
    void thread_in_stream_strb_V_read();
    void thread_in_stream_user_V_read();
    void thread_out_stream_data_V_din();
    void thread_out_stream_data_V_write();
    void thread_out_stream_dest_V_din();
    void thread_out_stream_dest_V_write();
    void thread_out_stream_id_V_din();
    void thread_out_stream_id_V_write();
    void thread_out_stream_keep_V_din();
    void thread_out_stream_keep_V_write();
    void thread_out_stream_last_V_din();
    void thread_out_stream_last_V_write();
    void thread_out_stream_strb_V_din();
    void thread_out_stream_strb_V_write();
    void thread_out_stream_user_V_din();
    void thread_out_stream_user_V_write();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
