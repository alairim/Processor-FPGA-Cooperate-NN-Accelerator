// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mult_accel_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_stream_keep_V_din,
        out_stream_keep_V_full_n,
        out_stream_keep_V_write,
        out_stream_strb_V_din,
        out_stream_strb_V_full_n,
        out_stream_strb_V_write,
        out_stream_user_V_din,
        out_stream_user_V_full_n,
        out_stream_user_V_write,
        out_stream_last_V_din,
        out_stream_last_V_full_n,
        out_stream_last_V_write,
        out_stream_id_V_din,
        out_stream_id_V_full_n,
        out_stream_id_V_write,
        out_stream_dest_V_din,
        out_stream_dest_V_full_n,
        out_stream_dest_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] out_stream_keep_V_din;
input   out_stream_keep_V_full_n;
output   out_stream_keep_V_write;
output  [3:0] out_stream_strb_V_din;
input   out_stream_strb_V_full_n;
output   out_stream_strb_V_write;
output  [3:0] out_stream_user_V_din;
input   out_stream_user_V_full_n;
output   out_stream_user_V_write;
output  [0:0] out_stream_last_V_din;
input   out_stream_last_V_full_n;
output   out_stream_last_V_write;
output  [4:0] out_stream_id_V_din;
input   out_stream_id_V_full_n;
output   out_stream_id_V_write;
output  [4:0] out_stream_dest_V_din;
input   out_stream_dest_V_full_n;
output   out_stream_dest_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_stream_keep_V_write;
reg out_stream_strb_V_write;
reg out_stream_user_V_write;
reg out_stream_last_V_write;
reg out_stream_id_V_write;
reg out_stream_dest_V_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_stream_keep_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_156_p2;
reg    out_stream_strb_V_blk_n;
reg    out_stream_user_V_blk_n;
reg    out_stream_last_V_blk_n;
reg    out_stream_id_V_blk_n;
reg    out_stream_dest_V_blk_n;
wire   [9:0] i_1_fu_150_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_2_fu_162_p2;
reg    ap_block_state3;
reg   [9:0] i_reg_122;
wire   [0:0] exitcond1_fu_144_p2;
reg   [9:0] i1_reg_133;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_133 <= 10'd0;
    end else if ((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_reg_133 <= i_2_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_122 <= i_1_fu_150_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_122 <= 10'd0;
    end
end

always @ (*) begin
    if (((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_dest_V_blk_n = out_stream_dest_V_full_n;
    end else begin
        out_stream_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_dest_V_write = 1'b1;
    end else begin
        out_stream_dest_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_id_V_blk_n = out_stream_id_V_full_n;
    end else begin
        out_stream_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_id_V_write = 1'b1;
    end else begin
        out_stream_id_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_keep_V_blk_n = out_stream_keep_V_full_n;
    end else begin
        out_stream_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_keep_V_write = 1'b1;
    end else begin
        out_stream_keep_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_last_V_blk_n = out_stream_last_V_full_n;
    end else begin
        out_stream_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_last_V_write = 1'b1;
    end else begin
        out_stream_last_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_strb_V_blk_n = out_stream_strb_V_full_n;
    end else begin
        out_stream_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_strb_V_write = 1'b1;
    end else begin
        out_stream_strb_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_user_V_blk_n = out_stream_user_V_full_n;
    end else begin
        out_stream_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_stream_user_V_write = 1'b1;
    end else begin
        out_stream_user_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0))) & (exitcond_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = (((exitcond_fu_156_p2 == 1'd1) & (out_stream_dest_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_id_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_last_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_user_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_strb_V_full_n == 1'b0)) | ((exitcond_fu_156_p2 == 1'd1) & (out_stream_keep_V_full_n == 1'b0)));
end

assign exitcond1_fu_144_p2 = ((i_reg_122 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond_fu_156_p2 = ((i1_reg_133 == 10'd784) ? 1'b1 : 1'b0);

assign i_1_fu_150_p2 = (i_reg_122 + 10'd1);

assign i_2_fu_162_p2 = (i1_reg_133 + 10'd1);

assign out_stream_dest_V_din = 5'd0;

assign out_stream_id_V_din = 5'd0;

assign out_stream_keep_V_din = 4'd15;

assign out_stream_last_V_din = 1'd1;

assign out_stream_strb_V_din = 4'd15;

assign out_stream_user_V_din = 4'd0;

endmodule //mult_accel_core
