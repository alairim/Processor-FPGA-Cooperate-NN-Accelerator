// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pop_stream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        e_data_V_dout,
        e_data_V_empty_n,
        e_data_V_read,
        e_keep_V_dout,
        e_keep_V_empty_n,
        e_keep_V_read,
        e_strb_V_dout,
        e_strb_V_empty_n,
        e_strb_V_read,
        e_user_V_dout,
        e_user_V_empty_n,
        e_user_V_read,
        e_last_V_dout,
        e_last_V_empty_n,
        e_last_V_read,
        e_id_V_dout,
        e_id_V_empty_n,
        e_id_V_read,
        e_dest_V_dout,
        e_dest_V_empty_n,
        e_dest_V_read,
        ap_return,
        e_data_V_blk_n,
        e_keep_V_blk_n,
        e_strb_V_blk_n,
        e_user_V_blk_n,
        e_last_V_blk_n,
        e_id_V_blk_n,
        e_dest_V_blk_n
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] e_data_V_dout;
input   e_data_V_empty_n;
output   e_data_V_read;
input  [3:0] e_keep_V_dout;
input   e_keep_V_empty_n;
output   e_keep_V_read;
input  [3:0] e_strb_V_dout;
input   e_strb_V_empty_n;
output   e_strb_V_read;
input  [3:0] e_user_V_dout;
input   e_user_V_empty_n;
output   e_user_V_read;
input  [0:0] e_last_V_dout;
input   e_last_V_empty_n;
output   e_last_V_read;
input  [4:0] e_id_V_dout;
input   e_id_V_empty_n;
output   e_id_V_read;
input  [4:0] e_dest_V_dout;
input   e_dest_V_empty_n;
output   e_dest_V_read;
output  [31:0] ap_return;
output   e_data_V_blk_n;
output   e_keep_V_blk_n;
output   e_strb_V_blk_n;
output   e_user_V_blk_n;
output   e_last_V_blk_n;
output   e_id_V_blk_n;
output   e_dest_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg e_data_V_read;
reg e_keep_V_read;
reg e_strb_V_read;
reg e_user_V_read;
reg e_last_V_read;
reg e_id_V_read;
reg e_dest_V_read;
reg[31:0] ap_return;
reg e_data_V_blk_n;
reg e_keep_V_blk_n;
reg e_strb_V_blk_n;
reg e_user_V_blk_n;
reg e_last_V_blk_n;
reg e_id_V_blk_n;
reg e_dest_V_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [31:0] ret_fu_80_p1;
reg   [31:0] ap_return_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_preg <= ret_fu_80_p1;
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return = ret_fu_80_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_data_V_blk_n = e_data_V_empty_n;
    end else begin
        e_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_data_V_read = 1'b1;
    end else begin
        e_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_dest_V_blk_n = e_dest_V_empty_n;
    end else begin
        e_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_dest_V_read = 1'b1;
    end else begin
        e_dest_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_id_V_blk_n = e_id_V_empty_n;
    end else begin
        e_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_id_V_read = 1'b1;
    end else begin
        e_id_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_keep_V_blk_n = e_keep_V_empty_n;
    end else begin
        e_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_keep_V_read = 1'b1;
    end else begin
        e_keep_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_last_V_blk_n = e_last_V_empty_n;
    end else begin
        e_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_last_V_read = 1'b1;
    end else begin
        e_last_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_strb_V_blk_n = e_strb_V_empty_n;
    end else begin
        e_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_strb_V_read = 1'b1;
    end else begin
        e_strb_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_user_V_blk_n = e_user_V_empty_n;
    end else begin
        e_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_user_V_read = 1'b1;
    end else begin
        e_user_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (e_dest_V_empty_n == 1'b0) | (e_id_V_empty_n == 1'b0) | (e_last_V_empty_n == 1'b0) | (e_user_V_empty_n == 1'b0) | (e_strb_V_empty_n == 1'b0) | (e_keep_V_empty_n == 1'b0) | (e_data_V_empty_n == 1'b0));
end

assign ret_fu_80_p1 = e_data_V_dout;

endmodule //pop_stream
